// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/user_agent_matcher.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserAgentMatcher is a mock of UserAgentMatcher interface.
type MockUserAgentMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockUserAgentMatcherMockRecorder
}

// MockUserAgentMatcherMockRecorder is the mock recorder for MockUserAgentMatcher.
type MockUserAgentMatcherMockRecorder struct {
	mock *MockUserAgentMatcher
}

// NewMockUserAgentMatcher creates a new mock instance.
func NewMockUserAgentMatcher(ctrl *gomock.Controller) *MockUserAgentMatcher {
	mock := &MockUserAgentMatcher{ctrl: ctrl}
	mock.recorder = &MockUserAgentMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAgentMatcher) EXPECT() *MockUserAgentMatcherMockRecorder {
	return m.recorder
}

// IsMatched mocks base method.
func (m *MockUserAgentMatcher) IsMatched(userAgent string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMatched", userAgent)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMatched indicates an expected call of IsMatched.
func (mr *MockUserAgentMatcherMockRecorder) IsMatched(userAgent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMatched", reflect.TypeOf((*MockUserAgentMatcher)(nil).IsMatched), userAgent)
}
